"use client";

// libs
import { useState, useEffect } from "react";
import Head from "next/head";
// types
import { Product } from "@/app/types";
// components
import ProductItem from "@/components/ProductItem";

export default function Shop() {
  const [products, setProducts] = useState<Product[]>([]);
  const [filteredProducts, setFilteredProducts] = useState<Product[]>([]);
  const [search, setSearch] = useState("");
  const [gender, setGender] = useState("all");
  const [currentPage, setCurrentPage] = useState(1);
  const productsPerPage = 8;

  useEffect(() => {
    async function fetchProducts() {
      try {
        const res = await fetch("http://localhost:5001/products");
        if (!res.ok) throw new Error("Failed to fetch products");
        const data = await res.json();
        setProducts(data);
        setFilteredProducts(data);
      } catch (error) {
        console.error("Error fetching products:", error);
      }
    }
    fetchProducts();
  }, []);

  useEffect(() => {
    let filtered = products.filter((product) =>
      product.title.toLowerCase().includes(search.toLowerCase())
    );
    if (gender !== "all") {
      filtered = filtered.filter((product) => product.gender === gender);
    }
    setFilteredProducts(filtered);
  }, [search, gender, products]);

  const indexOfLastProduct = currentPage * productsPerPage;
  const indexOfFirstProduct = indexOfLastProduct - productsPerPage;
  const currentProducts = filteredProducts.slice(
    indexOfFirstProduct,
    indexOfLastProduct
  );
  const totalPages = Math.ceil(filteredProducts.length / productsPerPage);

  return (
    <>
      <Head>
        <title>Store</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="bg0 m-t-23 p-b-140">
        <div className="container">
          <div className="flex-w flex-sb-m p-b-52">
            <div className="flex-w flex-l-m filter-tope-group m-tb-10">
              {["all", "women", "men"].map((gen) => (
                <button
                  key={gen}
                  className={`stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5 ${
                    gender === gen ? "how-active1" : ""
                  }`}
                  onClick={() => setGender(gen)}
                >
                  {gen.charAt(0).toUpperCase() + gen.slice(1)}
                </button>
              ))}
            </div>

            <div className="panel-search w-full p-t-10 p-b-15">
              <div className="bor8 dis-flex p-l-15">
                <button className="size-113 flex-c-m fs-16 cl2 hov-cl1 trans-04">
                  <i className="zmdi zmdi-search"></i>
                </button>
                <input
                  className="mtext-107 cl2 size-114 plh2 p-r-15"
                  type="text"
                  placeholder="Search"
                  value={search}
                  onChange={(e) => setSearch(e.target.value)}
                />
              </div>
            </div>
          </div>

          <div className="row isotope-grid">
            {currentProducts.length > 0 ? (
              currentProducts.map((product) => (
                <ProductItem key={product.id} product={product} />
              ))
            ) : (
              <p>No results found.</p>
            )}
          </div>

          <div className="flex-l-m flex-w w-full p-t-10">
            {Array.from({ length: totalPages }, (_, i) => (
              <button
                key={i + 1}
                className={`flex-c-m how-pagination1 trans-04 m-all-7 ${
                  currentPage === i + 1 ? "active-pagination1" : ""
                }`}
                onClick={() => setCurrentPage(i + 1)}
              >
                {i + 1}
              </button>
            ))}
          </div>
        </div>
      </div>
    </>
  );
}
